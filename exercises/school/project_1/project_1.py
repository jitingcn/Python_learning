#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Created by JT on 27/05/2018 05:17.

# Project 1
# student ID number:
# student name:

# My program follows the Python PEP8 standard and some code uses class blocks: object-oriented programming methods.
# I use git as a code version control tool.
# Repo Address: https://github.com/jitingcn/Python_learning/tree/master/exercises/school/project_1
# For this program, four sub-program can be run directly by a main program. The user can specify which modules to test.

import random  # import random module for all four sub-program


# 1. Random password generator.


class RandomPasswordGenerator(object):
    seed = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!?@#&;:"  # Password seed string

    # Password generation function, digit is the length of the generated password.
    # If not specified, one password with a random length (6-12) is generated by default.
    def pw_gen(self, digit=0):
        tmp = []  # Create a list for storing temporary password strings
        if digit == 0:  # default option
            for i in range(random.randint(6, 12)):  # Randomize the length of the password
                tmp.append(random.choice(self.seed))
                # Randomly selected from the seed list and added to the temporary list
        else:
            for i in range(digit):
                tmp.append(random.choice(self.seed))

        password = ''.join(tmp)  # Output items in the temporary list without gaps
        return password

    def main(self):
        while True:  # loop anyway by default
            print("\nRandom password generator")
            try:
                print("What length of password do you want to create? Leave blank as random length:", end="")
                digit = input()
                print("And do you want to specify the generated quantity? Leave blank as the default value(1):", end="")
                times = input()
                if times and digit:
                    digit, times = int(digit), int(times)
                    for x in range(times):
                        print(self.pw_gen(digit))
                elif digit:
                    digit = int(digit)
                    print(self.pw_gen(digit))
                elif times:
                    times = int(times)
                    for x in range(times):
                        print(self.pw_gen())
                else:
                    print(self.pw_gen())

            except Exception as e:
                print("Error:", e)

            if input("Enter any key to run again or leave blank to exit: "):  # ask for quit
                continue
            else:
                break


# 2. Hangman

class HangMan(object):
    version = "v0.5 Alpha (words: programming language)"  # just version
    # Create a words list using split, this method is easier to change word.
    words = "Java C Python PHP JavaScript Ruby Perl Swift Delphi Go Lisp Kotlin Haskell Bash".split()
    guesses = 5  # The player has 5 guess opportunities by default

    # Word selection function, used to randomly select a word in the words list and return the word
    def choose_word(self):
        return self.words[random.randint(0, len(self.words) - 1)]

    @staticmethod
    def ask_evaluate(word, result, missed):
        # Check whether the guessed letters entered are in the list of words or errors
        guess = input()
        if guess is None or len(guess) != 1 or (guess in result) or (guess in missed):  # If no match returns false
            return None, False
        i = 0  # Initialize the counter
        right = guess in word  # Guess correctly
        for x in word:  # Replace the underline with the guessed character
            if x == guess:
                result[i] = x
            i += 1
        return guess, right

    @staticmethod
    def play_again():
        print("Do you want to play again? (yes or no)", end="")
        status = input()
        if status == "yes":
            HangMan().main()
        else:
            pass

    def main(self):
        # welcome message
        print("\nWelcome to Hangman game!\nVersion: ", HangMan.version)

        word = list(self.choose_word().lower())  # Convert the extracted words to a list and lowercase all of them
        result = list("_" * len(word))  # Initialize the result list with the extracted character length and underline
        print("The word is: ", " ".join(result))
        success, i, missed = False, 0, []  # Initialize variables
        while i < self.guesses:  # Keep looping before guessing chance runs out
            print("You have", self.guesses - i, "more guesses.")
            print("Guess the word: ", end="")
            guess, right = self.ask_evaluate(word, result, missed)
            if guess is None:  # Wrong guess
                print('You\'ve already entered this character or doing something wrong.')
                continue
            print(" ".join(result))
            if result == word:  # Guess all letters
                print("Congratulations ! You've saved a life !")
                success = True
                break
            if not right:  # Add false guesses to the wrong character list
                missed.append(guess)
                i += 1
            print('Missed characters: ', missed)

        if not success:
            print("The word was '" + ''.join(word) + "' ! You've just killed a man!")

        self.play_again()


# 3. ATM

class ATM(object):
    def __init__(self):  # Set password and generate initial balance
        self.user_pin = "1234"
        self.user_init_balance = random.randint(100, 1000)
        self.user_balance = self.user_init_balance

    def login(self):  # log in function
        tries = 4
        while tries > 0:
            pin = input("Logging... Please Enter Your 4 Digit Pin: ")
            if self.verify_pin(pin):  # if match
                print("Pin accepted!")
                return True
            else:
                tries -= 1
                print("Invalid pin.", tries, "tries left.")
        print("To many incorrect tries. Could not log in!")
        return False

    def verify_pin(self, pin):  # verify pin code
        if pin == self.user_pin:
            return True
        else:
            return False

    def check_balance(self, show_type=1):
        if show_type == 1:
            print('\nYour balance: ', self.user_balance)
        elif show_type == 2:
            print("Your remain balance: ", self.user_balance)

    def withdraw(self):
        self.check_balance()
        input_amount = input("How much do you want to withdraw?")
        try:
            amount = int(input_amount)
            if amount <= self.user_balance:
                self.user_balance = self.user_balance - amount
                print("\nSuccess!")
                self.check_balance(2)
            else:
                print("Wrong number! You don't have enough balance!")
        except Exception as e:
            print("Error: ", e)

    def deposit(self):
        self.check_balance()
        input_amount = input("How much do you want to deposit? ")
        try:
            amount = int(input_amount)
            self.user_balance = self.user_balance + amount
            print("\nSuccess!")
            self.check_balance(2)
        except Exception as e:
            print("Failed... Wrong enter. ", e)

    def menu(self):
        run = True
        print("\nHello customer!")
        while run:
            operation = input("\n1: Check balance\n"
                              "2: Withdraw\n"
                              "3: Deposit funds\n"
                              "q: Log out\n"
                              "Please select operation: ")
            if operation == "1":
                self.check_balance()
                print("What do you want to do next?")
            elif operation == "2":
                if self.user_balance > 0:
                    self.withdraw()
                else:
                    self.check_balance()
                    print("Operation Failed! There is no balance in your account.")
            elif operation == "3":
                self.deposit()
            elif operation == "q":
                run = False
            else:
                print("\nWrong enter, please type again.")

    def main(self):
        print("\nWelcome to JT Bank ATM!")
        ATM.run = True
        while ATM.run:
            operation = input("\n1: Log in\n"
                              "q: quit\n"
                              "Please select operation: ")
            if operation == "1":
                if self.login():
                    self.menu()
                    print("Thanks for using!")
                else:
                    ATM.run = False
            elif operation == "q":
                ATM.run = False
            else:
                print("\nWrong number, please type again.")


# 4. Currency Conversion


class CurrencyConverter(object):
    rates = {"GBP": 1, "USD": 1.3, "EUR": 1.15, "YEN": 150, "AUD": 1.75, "CNY": 8.80}  # exchange rate

    def exchange_rate(self, o, t):  # Calculate the exchange rate
        origin = self.rates.get(o)
        target = self.rates.get(t)
        rate = target / origin
        return rate

    def main(self):
        print("\nWelcome to Currency Converter")
        print("Supported currency: GBP USD EUR YEN AUD CNY")
        try:
            print("Enter the origin currency that you wish to convert: ", end="")
            origin = input().upper()
            while origin not in self.rates:
                print("Can't find this currency, please try again.")
                print("Enter the origin currency that you wish to convert: ", end="")
                origin = input().upper()
            print("Enter the target currency that you wish to convert: ", end="")
            target = input().upper()
            while target not in self.rates:
                print("Can't find this currency, please try again.")
                print("Enter the target currency that you wish to convert: ", end="")
                target = input().upper()
            rate = self.exchange_rate(origin, target)
            amount = float(input("Enter the amount you wish to convert: "))
            target_amount = amount * rate
            print("%.2f %s = %.2f %s" % (amount, origin, target_amount, target))
        except Exception as e:
            print("Error:", e)
        finally:
            again = input("Enter 'c' key to run again or 'q' to quit: ")
            while not (again == "c" or again == "q"):
                print("Error, wrong enter, please try again. ")
                again = input("Enter 'c' key to run again or 'q' to quit: ")
            if again == "c":
                self.main()
            elif again == "q":
                pass


if __name__ == '__main__':
    while True:
        print("\nProject 1")
        print("\n1. Random password generator")
        print("2. Hangman")
        print("3. ATM")
        print("4. Currency Conversion")
        print("q: quit")
        print("\nEnter the number to run the program: ", end="")
        try:
            op = input()
            if op == "1":
                RandomPasswordGenerator().main()
            elif op == "2":
                HangMan().main()
            elif op == "3":
                ATM().main()
            elif op == "4":
                CurrencyConverter().main()
            elif op == "q":
                break
            else:
                raise Exception("Can not find the requested operation!")
        except Exception as error:
            print("\nError:", error)
